# 부동산 관리 시스템 PRD (Product Requirements Document)

## 1. 개요 및 프로젝트 목표

### 1.1 소개
현재 PyQt5 기반으로 구현된 부동산 관리 시스템을 HTML/CSS/JS 기반의 웹 애플리케이션으로 전환하는 프로젝트입니다. 이 문서는 현재 애플리케이션의 기능을 분석하고, 웹 애플리케이션으로 전환하기 위한 요구사항을 정의합니다.

### 1.2 목표
- 현재 데스크톱 애플리케이션의 모든 핵심 기능을 유지하면서 웹 기반으로 전환
- 사용자 경험 개선 및 접근성 향상
- 다양한 기기에서의 접근 가능성 제공
- 유지보수 및 확장성 개선

## 2. 현재 애플리케이션 구조 및 주요 기능

### 2.1 애플리케이션 구조
현재 애플리케이션은 다음과 같은 구조로 구성되어 있습니다:
- `main_app_test.py`: 메인 애플리케이션 진입점
- 여러 탭 모듈 (all_tab.py, customer_tab.py, recommend_tab.py 등)
- 마이리스트 관련 모듈 (mylist_container.py, mylist/base_container.py 등)
- 대화상자 모듈 (dialogs/ 디렉토리)
- UI 유틸리티 (ui_utils.py)

### 2.2 주요 기능

#### 2.2.1 메인 탭 시스템
애플리케이션은 여러 탭으로 구성된 인터페이스를 제공합니다:
- **전체 탭**: 다양한 출처의 데이터를 통합하여 표시 (추천, 확인, 상가, 원룸, 마이리스트, 계약완료)
- **매물체크(확인) 탭**: 매물 확인 상태를 관리
- **상가 탭**: 상가 매물 정보 관리
- **원룸 탭**: 원룸 매물 정보 관리
- **추천 탭**: 고객에게 추천할 매물 관리
- **마이리스트 탭**: 개인 매물 목록 관리 (상가, 원룸, 계약완료 하위 탭 포함)

#### 2.2.2 고객 관리 기능
- 고객 정보 추가, 수정, 삭제
- 고객별 업종 및 담당자 관리
- 고객 선택 시 관련 매물 필터링
- 고객-매물 매칭 시스템

#### 2.2.3 매물 추천 시스템
- 서버에서 추천 매물 데이터 자동 로드
- 주소, 업종, 담당자 등에 따른 필터링
- 추천 매물의 상태 추적 및 관리
- 이미지 표시 및 슬라이드쇼 기능

#### 2.2.4 마이리스트 관리
- 상가, 원룸, 계약완료 매물 관리
- 행 추가, 편집, 삭제
- 상태 변경 (확인필요, 부재중, 재광고, 거래완료, 광고X)
- 네이버 매물 검색 및 통합

#### 2.2.5 데이터 동기화 및 상태 관리
- 서버와 주기적인 데이터 동기화
- 상태 변경 사항 서버 저장
- 자동 저장 기능

## 3. 주요 UI 컴포넌트

### 3.1 탭 인터페이스
- 색상으로 구분된 탭 시스템 (MyTabStyle 클래스)
- 각 탭별 특화된 테이블 뷰

### 3.2 테이블 뷰
- 정렬 가능한 컬럼
- 컨텍스트 메뉴 (추천매물 등록, 마이리스트에 복사, 상태 변경)
- 컬럼 너비 저장 및 복원 기능

### 3.3 대화상자
- 로그인 및 회원가입 대화상자
- 메모 편집 대화상자
- 이미지 슬라이드쇼 창
- 매물 검색 대화상자
- 상태 변경 대화상자
- 업종 선택 대화상자
- 캘린더 팝업

### 3.4 콤보박스 및 필터
- 상태별 색상 코드 적용
- 동적 필터링 기능

## 4. 데이터 모델 및 흐름

### 4.1 주요 데이터 모델
- 고객 정보 모델
- 추천 매물 모델
- 상가/원룸 매물 모델
- 계약완료 모델

### 4.2 데이터 흐름
- 고객 선택 → 관련 매물 필터링 → 여러 탭에 표시
- 서버에서 데이터 로드 → 로컬 캐시 저장 → UI 갱신
- 상태 변경 → 서버에 변경사항 전송

### 4.3 서버 통신
- RESTful API를 통한 데이터 교환
- 백그라운드 스레드를 통한 비동기 요청 처리

## 5. 각 탭 상세 설명

### 5.1 전체 탭 (All Tab)
전체 탭은 애플리케이션의 핵심 기능을 제공하며, 다양한 출처의 데이터를 통합해 표시합니다.

#### 5.1.1 핵심 기능
- **통합 데이터 뷰**: 추천, 확인, 상가, 원룸, 마이리스트, 계약완료 등 모든 출처의 데이터를 단일 테이블에 표시
- **출처별 색상 구분**: 각 데이터 출처에 따라 행 배경색을 다르게 표시하여 시각적 구분 제공
- **데이터 중복 제거**: 여러 출처에서 동일한 매물에 대한 중복 데이터 제거 및 최신 정보 우선 표시
- **매물 정보 상세 표시**: 주소, 호수, 층, 보증금/월세, 관리비, 권리금, 현업종, 평수, 연락처, 매물번호 등의 상세 정보 제공

#### 5.1.2 표시 및 제어 기능
- **주소 선택 시 이미지 표시**: 주소 셀 클릭 시 해당 매물의 이미지를 슬라이드쇼로 표시
- **매물번호 버튼**: 네이버 매물번호와 써브 매물번호를 버튼 형태로 제공하며, 클릭 시 클립보드에 복사
- **정렬 기능**: 광고종료일 기준 등 각 컬럼별 정렬 기능 제공
- **컨텍스트 메뉴**: 추천매물 등록, 마이리스트 복사, 상태 변경 기능을 제공하는 우클릭 메뉴

#### 5.1.3 동적 데이터 관리
- **타이머 기반 자동 갱신**: 30초 간격으로 테이블 데이터 자동 갱신
- **배경 데이터 로드**: 비동기 백그라운드 스레드를 통한 데이터 로딩으로 UI 응답성 유지
- **메모리 관리**: 종료 시 리소스 정리 및 메모리 관리

#### 5.1.4 검색 및 필터링
- **검색 기능**: 주소, 키워드 기반 검색 기능 제공
- **고객 연동 필터링**: 고객 탭에서 고객 선택 시 관련 매물만 필터링하여 표시
- **다중 주소 지원**: 여러 주소를 동시에 필터링하는 기능 지원

### 5.2 고객 탭 (Customer Tab)
고객 탭은 고객 정보 관리와 매물 추천을 위한 기능을 제공합니다.

#### 5.2.1 고객 정보 관리
- **고객 데이터 표시**: 지역, 보증금, 월세, 평수, 층, 권리금, 업종, 연락처, 실보증금/월세, 최근연락날짜, 메모, 담당자 등의 정보를 테이블로 표시
- **고객 추가**: "고객 등록" 버튼을 통해 새 고객 정보 추가
- **고객 정보 수정**: 고객 행 더블클릭 시 정보 수정 대화상자 표시
- **고객 삭제**: 컨텍스트 메뉴를 통해 고객 정보 삭제

#### 5.2.2 데이터 표현 및 편집
- **범위 값 처리**: 보증금, 월세, 평수 등의 범위 값 처리 (예: "100~200")
- **층 범위 처리**: 층 정보의 복잡한 표현 지원 (예: "2층이상", "탑층", "지하층", "1~5층" 등)
- **지역 데이터 처리**: JSON 형식의 지역 데이터를 사용자 친화적인 텍스트로 변환 (예: "강남구(전체), 서초구(3)")
- **메모 데이터 관리**: 날짜별 메모 데이터 관리 및 표시

#### 5.2.3 매물 연동 시스템
- **업종-담당자 기반 매칭**: 고객 선택 시 해당 고객의 업종과 담당자에 맞는 매물을 자동으로 필터링
- **다중 탭 연동**: 고객 선택 시 전체 탭, 추천 탭, 상가 탭, 원룸 탭, 마이리스트 탭 등이 연동되어 필터링된 정보 표시
- **매칭 주소 목록 관리**: 고객과 매칭되는 주소 목록을 selected_addresses에 저장하여 관리

#### 5.2.4 비동기 데이터 처리
- **UI 즉시 반영**: 고객 정보 수정 시 UI를 즉시 업데이트하여 응답성 향상
- **백그라운드 서버 통신**: 데이터 저장 및 로드를 백그라운드 스레드에서 처리하여 UI 블로킹 방지
- **변경 감지 최적화**: 실제 데이터 변경이 있는 경우에만 서버 업데이트 및 탭 업데이트 수행

### 5.3 추천 탭 (Recommend Tab)
추천 탭은 고객에게 추천할 매물을 관리하는 기능을 제공합니다.

#### 5.3.1 데이터 관리 및 동기화
- **서버 데이터 자동 로드**: 10초 간격으로 서버에서 최신 추천 매물 데이터를 자동으로 로드
- **로컬 캐시 관리**: 모든 추천 매물 데이터를 parent_app.recommend_dict에 캐싱하여 전체 애플리케이션에서 일관된 데이터 접근 제공
- **주소별 데이터 조직화**: 주소를 키로 사용하여 recommend_dict에 데이터를 구조화하고, 각 주소별 추천 매물 목록 관리
- **시그널 기반 연동**: 데이터 로드 완료 시 data_loaded_for_address 시그널을 발생시켜 다른 탭에 알림

#### 5.3.2 필터링 및 표시 기능
- **고객 정보 기반 필터링**: 고객 탭에서 선택된 고객의 업종과 담당자를 기준으로 매물 필터링
- **주소 기반 필터링**: 선택된 주소에 해당하는 추천 매물만 표시
- **정렬 기능**: 추천일 기준 내림차순 정렬 등 다양한 기준으로 정렬 가능
- **데이터 표현**: 주소, 호수, 층, 보증금/월세, 관리비, 권리금, 현업종, 평수, 연락처, 매물번호, 제목, 매칭업종, 확인메모, 추천일, 주차대수 등의 정보 표시

#### 5.3.3 사용자 상호작용
- **이미지 미리보기**: 주소 셀 클릭 시 해당 매물의 이미지를 슬라이드쇼로 표시
- **매물번호 복사**: 매물번호 셀 클릭 시 클립보드에 복사 기능
- **상태 변경**: 컨텍스트 메뉴를 통한 매물 상태 변경 기능

#### 5.3.4 비동기 처리 및 메모리 관리
- **백그라운드 데이터 로드**: 비동기 백그라운드 스레드를 통한 데이터 로딩으로 UI 응답성 유지
- **안전한 종료 처리**: 앱 종료 시 타이머, 스레드 등의 리소스 정리 및 메모리 관리
- **예외 처리**: 다양한 오류 상황(네트워크 문제, 서버 오류, 앱 종료 중 상태 등)에 대한 강건한 처리

### 5.4 마이리스트 탭 (MyList Tab)
마이리스트 탭은 개인 매물 목록을 관리하는 기능을 제공합니다.

#### 5.4.1 구조 및 구성요소
- **모듈화된 아키텍처**: 기존 코드에서 모듈화된, 유지보수가 용이한 구조로 전환 중
- **하위 탭 구성**: 상가(새광고), 원룸(새광고), 계약완료의 세 가지 하위 탭으로 구성
- **호환성 레이어**: 레거시 코드와 새로운 모듈화된 코드 사이의 원활한 전환을 위한 호환성 레이어 제공
- **역할 기반 매니저 클래스**: 로깅, 행 관리, 상태 처리, 네이버 검수, 저장 등 기능별 책임을 분리한 매니저 클래스 구조

#### 5.4.2 데이터 관리 기능
- **자동 저장 시스템**: 타이머를 사용한 주기적인 변경사항 자동 저장 기능
- **상태 관리**: 매물의 상태(확인필요, 부재중, 재광고, 거래완료, 광고X 등)를 관리하고 시각적으로 표시
- **행 색상 관리**: 재광고/새광고 여부에 따라 행 배경색을 다르게 표시하여 시각적 구분 제공
- **주소 기반 필터링**: 선택된 주소에 따라 모든 하위 탭의 데이터를 필터링하는 기능

#### 5.4.3 상가/원룸 탭 기능
- **매물 데이터 추가**: 새로운 상가/원룸 매물 데이터 추가 기능
- **네이버 연동**: 네이버 매물 형식 파싱 및 통합 기능
- **매니저 요약 정보**: 담당자별 매물 통계 및 요약 정보 제공
- **행 편집 및 삭제**: 매물 정보 편집 및 삭제 기능

#### 5.4.4 계약완료 탭 기능
- **계약 완료 매물 관리**: 거래가 완료된 매물의 관리 및 조회
- **타이머 기반 갱신**: 주기적인 데이터 갱신을 통한 최신 정보 유지
- **계약 정보 표시**: 계약 완료된 매물의 상세 정보 및 계약 관련 데이터 표시

### 5.5 매물체크 탭 (CheckConfirm Tab)
매물체크 탭은 매물 확인 상태를 관리하는 기능을 제공합니다.

#### 5.5.1 데이터 관리 및 동기화
- **서버 데이터 자동 로드**: 10초 간격으로 서버에서 모든 확인 매물 데이터를 자동으로 로드
- **로컬 캐시 관리**: 확인 매물 데이터를 check_confirm_dict에 캐싱하여 주소별로 구조화된 데이터 접근 제공
- **사용자 권한 기반 데이터 요청**: 담당자(manager)와 역할(role) 정보를 서버 요청에 포함하여 적절한 데이터만 수신
- **시그널 기반 연동**: 데이터 로드 완료 시 data_loaded_for_address 시그널을 발생시켜 다른 탭에 알림

#### 5.5.2 필터링 및 표시 기능
- **고객 선택 기반 필터링**: 고객 탭에서 선택된 고객의 정보를 기반으로 매물 필터링
- **주소 기반 필터링**: 단일 주소 또는 여러 주소를 기준으로 매물 필터링 기능 지원
- **테이블 데이터 표시**: 주소, 호수, 층, 보증금/월세, 관리비, 권리금, 현업종, 평수, 연락처, 매물번호, 제목, 매칭업종, 확인메모, 주차대수, 용도, 사용승인일, 방/화장실 수, 광고등록일, 사진경로, 소유자명, 관계 등의 상세 정보 표시
- **정렬 기능**: 각 컬럼별 정렬 기능 제공

#### 5.5.3 사용자 인터페이스
- **컬럼 너비 저장 및 복원**: 사용자가 설정한 테이블 컬럼 너비를 저장하고 다음 실행 시 복원
- **프라이머리 키 관리**: 각 행의 첫 번째 열(주소)에 confirm_id를 저장하여 데이터 관리 및 업데이트에 활용
- **출처 식별자**: 각 행에 "확인" 출처 식별자를 포함하여 다른 탭과의 데이터 통합 시 활용

#### 5.5.4 비동기 처리 및 오류 관리
- **백그라운드 데이터 로드**: 비동기 백그라운드 스레드를 통한 데이터 로딩으로 UI 응답성 유지
- **안전한 종료 처리**: 앱 종료 감지 및 리소스 정리 메커니즘
- **다층적 오류 처리**: 네트워크 오류, 서버 오류, 앱 종료 중 상태 등 다양한 오류 상황에 대한 처리
- **모델 유효성 검사**: 데이터 업데이트 전 모델 객체 유효성 검사를 통한 크래시 방지

## 6. 웹 애플리케이션 전환 시 고려사항

### 6.1 프론트엔드 구조
- HTML/CSS/JS 기반 구현
- 탭 시스템을 웹 컴포넌트로 변환
- 테이블 뷰를 웹 테이블 또는 그리드 라이브러리로 변환
- 대화상자를 모달 또는 팝업으로 구현

### 6.2 백엔드 API 요구사항
- RESTful API 설계
- 데이터 모델을 JSON 형식으로 변환
- 인증 및 권한 관리 API
- 실시간 데이터 업데이트를 위한 웹소켓 고려

### 6.3 사용자 인증 및 권한
- 로그인 시스템 구현
- 역할 기반 접근 제어 (Role-Based Access Control)
- 세션 관리

### 6.4 반응형 디자인 가이드라인
- 다양한 화면 크기 지원
- 모바일 친화적 UI 요소
- 접근성 고려

## 7. 추가 확인이 필요한 기능

현재 코드 분석을 통해 확인된 기능 외에도 추가 분석이 필요한 영역:
- 데이터베이스 스키마 및 관계
- 사용자 권한 관리 시스템의 상세 구현
- 서버 측 API의 전체 구조
- 보고서 생성 기능 (존재하는 경우)
- 데이터 백업 및 복원 기능

## 8. 결론

이 PRD는 현재 확인 가능한 코드 분석을 바탕으로 작성되었습니다. 웹 애플리케이션으로의 전환을 위해 추가적인 코드 분석과 요구사항 수집이 필요할 수 있습니다. 이 문서는 지속적으로 업데이트되어야 합니다.