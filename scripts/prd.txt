# 부동산 관리 시스템 웹 전환 PRD (Product Requirements Document)

## 1. 개요 및 프로젝트 목표

### 1.1 소개
현재 PyQt5 기반으로 구현된 부동산 관리 시스템을 HTML/CSS/JS 기반의 웹 애플리케이션으로 전환하는 프로젝트입니다. 이 문서는 현재 애플리케이션의 기능을 분석하고, 웹 애플리케이션으로 전환하기 위한 요구사항을 정의합니다.

### 1.2 목표
- 현재 데스크톱 애플리케이션의 모든 핵심 기능을 유지하면서 웹 기반으로 전환
- 사용자 경험 개선 및 접근성 향상
- 다양한 기기에서의 접근 가능성 제공
- 유지보수 및 확장성 개선

## 2. 현재 애플리케이션 구조 및 주요 기능

### 2.1 애플리케이션 구조
현재 애플리케이션은 다음과 같은 구조로 구성되어 있습니다:
- `main_app_test.py`: 메인 애플리케이션 진입점
- `all_tab.py`: 통합 탭 관리
- `mylist_container.py`: 마이리스트 탭 컨테이너
- `manager_check_tab.py`: 매물체크 탭
- `customer_tab.py`: 고객관리 탭
- 각종 서브 모듈 및 유틸리티 파일

### 2.2 주요 탭 구조
애플리케이션의 주요 탭 구조는 다음과 같습니다:

1. **마이리스트 탭**: 개인 매물 목록 관리
   - 상가(새광고) 하위 탭
   - 원룸(새광고) 하위 탭
   - 계약완료 하위 탭
   
2. **매물체크 탭**: 매물 확인 상태 관리

3. **고객관리 탭**: 고객 정보 및 매물 추천 관리

## 3. 마이리스트 탭 상세 요구사항

### 3.1 구조 및 구성
- 모듈화된 아키텍처 유지
- 세 개의 하위 탭(상가, 원룸, 계약완료) 구현
- 역할 기반 컴포넌트 구조 적용

### 3.2 데이터 관리 기능
- 자동 저장 시스템 구현
- 매물 상태 관리 (확인필요, 부재중, 재광고, 거래완료, 광고X 등)
- 행 색상 관리 (재광고/새광고에 따른 시각적 구분)
- 주소 기반 필터링

### 3.3 상가/원룸 탭 기능
- 매물 데이터 추가, 편집, 삭제
- 네이버 매물 형식 파싱 및 통합
- 담당자별 매물 통계 및 요약 정보
- 매물번호 복사 및 이미지 슬라이드쇼 기능

### 3.4 계약완료 탭 기능
- 계약 완료 매물 관리 및 조회
- 정기적 데이터 갱신
- 계약 관련 상세 정보 표시

## 4. 매물체크 탭 상세 요구사항

### 4.1 데이터 관리
- 서버와의 자동 동기화
- 주소 및 고객 정보 기반 필터링
- 상세 매물 정보 표시 및 정렬

### 4.2 사용자 인터페이스
- 컬럼 너비 설정 저장 및 복원
- 매물 상태 시각화
- 사용자 정의 필터링

## 5. 고객관리 탭 상세 요구사항

### 5.1 고객 정보 관리
- 고객 데이터 추가, 수정, 삭제
- 범위 값 처리 (보증금, 월세, 평수, 층 등)
- 지역 데이터 및 메모 관리

### 5.2 매물 연동 시스템
- 업종-담당자 기반 매칭
- 다른 탭과의 연동 필터링
- 매칭 주소 목록 관리

## 6. 웹 애플리케이션 기술 스택

### 6.1 프론트엔드
- **프레임워크**: React 또는 Vue.js
- **상태 관리**: Redux 또는 Vuex
- **UI 라이브러리**: Material-UI 또는 Vuetify
- **테이블 컴포넌트**: React-Table 또는 Vue-Table
- **이미지 처리**: 이미지 슬라이더 및 지연 로딩 지원

### 6.2 백엔드
- **프레임워크**: FastAPI 또는 Django
- **데이터베이스**: PostgreSQL
- **인증**: JWT 기반 인증
- **API**: RESTful API 설계
- **실시간 기능**: WebSocket 지원

### 6.3 인프라
- **배포**: Docker 및 Docker Compose
- **CI/CD**: GitHub Actions
- **모니터링**: Prometheus 및 Grafana
- **로깅**: ELK 스택 (Elasticsearch, Logstash, Kibana)

## 7. 마이그레이션 전략

### 7.1 단계적 접근
1. 백엔드 API 개발 및 기존 기능 매핑
2. 프론트엔드 UI 컴포넌트 설계 및 구현
3. 데이터 마이그레이션 도구 개발
4. 통합 테스트 및 사용자 피드백 수집
5. 최종 전환 및 병행 운영 기간 설정

### 7.2 데이터 호환성
- 기존 데이터 형식의 완전한 지원
- 양방향 데이터 동기화 메커니즘
- 마이그레이션 검증 도구 개발

## 8. 사용자 인터페이스 요구사항

### 8.1 반응형 디자인
- 데스크톱, 태블릿, 모바일 지원
- 다크 모드 및 테마 지원
- 사용자 지정 레이아웃 저장

### 8.2 핵심 UI 컴포넌트
- 탭 네비게이션 시스템
- 고급 테이블 기능 (정렬, 필터링, 페이징)
- 모달 및 팝업 대화상자
- 이미지 슬라이드쇼
- 컨텍스트 메뉴

### 8.3 접근성
- 웹 접근성 표준 준수
- 키보드 네비게이션 지원
- 화면 읽기 프로그램 호환성

## 9. 성능 요구사항

### 9.1 로딩 및 응답 시간
- 초기 페이지 로드: 3초 이내
- 데이터 검색 및 필터링: 1초 이내
- 대량 데이터 처리: 페이징 또는 가상 스크롤링 사용

### 9.2 동시 사용자 지원
- 최소 50명의 동시 사용자 지원
- 확장 가능한 아키텍처 설계

## 10. 보안 요구사항

### 10.1 인증 및 권한
- 역할 기반 접근 제어 (RBAC)
- 세션 관리 및 자동 로그아웃
- 비밀번호 정책 적용

### 10.2 데이터 보안
- 전송 중 데이터 암호화 (HTTPS)
- 저장 데이터 암호화
- 개인정보 보호 정책 준수

## 11. 테스트 및 품질 보증

### 11.1 테스트 전략
- 단위 테스트: 코드 커버리지 80% 이상
- 통합 테스트: 주요 워크플로우 검증
- E2E 테스트: 사용자 시나리오 자동화

### 11.2 품질 지표
- 코드 품질: ESLint/Prettier 규칙 준수
- 성능 모니터링: 페이지 로드 시간, API 응답 시간
- 크로스 브라우저 호환성: Chrome, Firefox, Safari, Edge 지원

## 12. 배포 및 유지보수

### 12.1 배포 환경
- 개발, 스테이징, 프로덕션 환경 구성
- 자동화된 배포 파이프라인
- 롤백 메커니즘

### 12.2 모니터링 및 로깅
- 실시간 오류 추적
- 사용자 행동 분석
- 성능 메트릭 수집

### 12.3 업데이트 및 유지보수
- 주기적인 보안 업데이트
- 피드백 기반 기능 개선
- 정기적인 백업 및 복구 테스트